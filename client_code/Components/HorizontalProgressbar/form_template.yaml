components: []
container:
  event_bindings: {}
  properties:
    html: "<center>\n    <svg width=\"300\" height=\"50\" viewBox=\"0 0 300 50\" preserveAspectRatio=\"xMidYMid meet\">\n    <!-- Background rectangle -->\n    <rect x=\"10\" y=\"15\" width=\"280\" height=\"20\" fill=\"#e0e0e0\" rx=\"10\" ry=\"10\" />\n    \n    <!-- Progress rectangle -->\n    <rect class=\"horizontal-progressbar-rect\" x=\"10\" y=\"15\" width=\"0\" height=\"20\" fill=\"#76c7c0\" rx=\"10\" ry=\"10\" />\n    \n    <!-- Text (progress percentage) -->\n    <text class=\"horizontal-progressbar-text\" x=\"150\" y=\"27\" dominant-baseline=\"middle\" text-anchor=\"middle\" fill=\"#000000\" font-size=\"20\" font-family=\"Arial\">0%</text>\n\n    </svg>\n</center>\n\n<style>\n    .horizontal-progressbar-rect {\n        transition: width 0.3s ease-out;\n    }\n</style>\n\n<script>\n    function HorizontalProgressbarSetter(element, value) {\n        if (value >= 100) {\n            return;\n        }\n        const progressCircle = element.querySelector('.horizontal-progressbar-rect');\n        const progressText = element.querySelector('.horizontal-progressbar-text');\n\n        const maxWidth = 280;\n        const newWidth = (maxWidth * value) / 100;\n        \n        progressCircle.setAttribute('width', newWidth);\n        progressText.textContent = `${value}%`;\n    }\n    \n    // Set initial progress value (you can change this value to anything between 0 and 100)\n    //setProgress(this, 0);\n</script>"
  type: HtmlTemplate
custom_component: true
is_package: true
properties:
- {default_binding_prop: true, important: true, name: value, type: number}
